(load "~/.schemerc.scm")

(define (make-table)
  (list 'table 'end))

(define (table-set! table key value)
  (define (set-iter tbl)
    (let ((current (car tbl))
          (rest (cdr tbl)))
      (cond ((eq? 'end current) (insert! tbl (list key value)))
    ((eq? (car current) key) (set-cdr! current (list value)))
    (else (set-iter rest)))))
  (if (eq? (car table) 'table)
    (set-iter (cdr table))
    (error "TABLE-SET -- not a table")))

(define (table-get table key)
  (define (get-iter tbl)
    (let ((current (car tbl))
          (rest (cdr tbl)))
      (cond ((eq? 'end current) (error "TABLE-GET -- key not found"))
            ((eq? (car current) key) (cadr current))
            (else (get-iter rest)))))
  (if (eq? (car table) 'table)
    (get-iter (cdr table))
    (error "TABLE-GET -- not a table")))

(define (table-safe-get table key)
  (define (get-iter tbl)
    (let ((current (car tbl))
          (rest (cdr tbl)))
      (cond ((eq? 'end current) false)
            ((eq? (car current) key) (cadr current))
            (else (get-iter rest)))))
  (if (eq? (car table) 'table)
    (get-iter (cdr table))
    (error "TABLE-SAFE-GET -- not a table")))

(define (table-has-key table key)
  (define (get-iter tbl)
    (let ((current (car tbl))
          (rest (cdr tbl)))
      (cond ((eq? 'end current) false)
            ((eq? (car current) key) true)
            (else (get-iter rest)))))
  (if (eq? (car table) 'table)
    (get-iter (cdr table))
    (error "TABLE-HAS-KEY -- not a table")))

(define (table-memoize! table key func)
  (if (table-has-key table key)
    (table-get table key)
    (let ((val (func)))
      (table-set! table key val)
      val)))

(define (make-vector coords)
  (list 'vector coords (make-table)))

(define (vector? vec)
  (eq? (car vec) 'vector))

(define (vector-cache vec)
  (caddr vec))

(define (vector-coords vec)
  (cadr vec))

(define (vector-dimension vec)
  (table-memoize! (vector-cache vec)
                  'dimension
                  (lambda () (length (vector-coords vec)))))

(define (vector-add v1 v2)
  (assert (vector? v1) "not a vector: v1")
  (assert (vector? v2) "not a vector: v2")
  (assert (= (vector-dimension v1) (vector-dimension v2))
          "cannot add vectors of different dimensions")
  (define (coord-add c1 c2)
    (map (lambda (t) (+ (car t) (cadr t))) (zip c1 c2)))
  (make-vector (coord-add (vector-coords v1)
                          (vector-coords v2))))

(define (vector-sub v1 v2)
  (assert (vector? v1) "not a vector: v1")
  (assert (vector? v2) "not a vector: v2")
  (assert (= (vector-dimension v1) (vector-dimension v2))
          "cannot sub vectors of different dimensions")
  (define (coord-sub c1 c2)
    (map (lambda (t) (- (car t) (cadr t))) (zip c1 c2)))
  (make-vector (coord-sub (vector-coords v1)
                          (vector-coords v2))))

(define (vector-scale vec c)
  (assert (vector? vec) "not a vector: vec")
  (make-vector (map (lambda (x) (* x c)) (vector-coords vec))))

(define (vector-dot v1 v2)
  (assert (vector? v1) "not a vector: v1")
  (assert (vector? v2) "not a vector: v2")
  (assert (= (vector-dimension v1) (vector-dimension v2))
          "cannot dot vectors of different dimensions")
  (let ((c1 (vector-coords v1))
        (c2 (vector-coords v2)))
    (fold + 0 (map (lambda (t) (* (car t) (cadr t))) (zip c1 c2)))))
